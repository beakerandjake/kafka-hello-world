version: "3.7"
services:
  producer:
    build: producer
    container_name: producer
    environment:
      - PRODUCER_SPEED_MS=1000
      - PRODUCER_TOPIC=stock_price_changes
    networks:
      - kafka_network
    depends_on:
      - kafka
  consumer:
    build: consumer
    container_name: consumer
    environment:
      - CONSUMER_TOPIC=stock_price_changes
      - PGHOST=postgres
      - PGUSER=postgres
      - PGPASSWORD=123456
    networks:
      - kafka_network
      - postgres_network
    depends_on:
      kafka:
        condition: service_started
      postgres:
        condition: service_healthy
  kafka:
    image: bitnami/kafka:3.6.1
    container_name: kafka
    networks:
      - kafka_network
    ports:
      - "9092:9092"
    # volumes:
    #   - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
  postgres:
    image: postgres:16.1
    container_name: postgres
    restart: always
    environment: 
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123456
      # POSTGRES_DB: stocks
    volumes:
      # - postgres_data:/var/lib/postgresql/data
      - ./database/create.sql:/docker-entrypoint-initdb.d/create.sql
      - ./database/insert.sql:/docker-entrypoint-initdb.d/insert.sql
    networks:
      - postgres_network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 2s
      retries: 20
# volumes:
#   kafka_data:
#     driver: local
#   # postgres_data:
networks:
  kafka_network:
  postgres_network:
